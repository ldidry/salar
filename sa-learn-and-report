#!/bin/bash

VERSION='0.5'

function print_version {
    cat << EOF
salar v$VERSION
Copyright 2012 Luc Didry <luc@fiat-tux.fr>

You can find the last version at http://dev.fiat-tux.fr/
EOF
}

function print_license {
    print_version
    cat << EOF

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
EOF
}

function print_usage {
    print_version
    cat << EOF

This script make sa-learn learn spam and ham from configured directories and mail
a report with some stats. Salar means "sa-learn and report"

Usage:
    salar [-h] [-v] [-l] [-p] [-r] [-c /path/to/configuration]
        -h print this help and exit
        -v print the version and exit
        -l print the license and exit
        -p print the report instead of mailing it
        -r don't run sa-learn but use the last report instead (see REPORTFILE)
        -c set the configuration file to use. Default is /etc/spamassassin/salar.conf

You need a valid configuration in order to salar to work.
Example of configuration:

    SPAMDIR="/home/luc/Mail/Spam"           # [required]
    HAMDIR="/home/luc/Mail/Ham"             # [required]
    SALEARN="sa-learn"                      # [optional, this is the default]
    SALEARNOPTS=""                          # [optional, this is the default]
    REPORTFILE="/tmp/sa-learn.report"       # [optional, this is the default]
    CUSTOMSUBJECT="[salar] \$(hostname)"  # [optional, this is the default]
    MAILTO="root@\$(hostname -f)"            # [optional, this is the default]
    MAILFROM="root@\$(hostname -f)"          # [optional, this is the default]
    MAILFULLFROM="root@\$(hostname -f)"      # [optional, this is the default]
    PRINTONLY=0                             # [optional, this is the default]
EOF
}

function need_conf {
    cat << EOF
You need a valid configuration in order to salar to work.
Run salar -h to see an example.
EOF
}
## Variables initialization
SALEARN="sa-learn"
SALEARNOPTS=""
REPORTFILE="/tmp/sa-learn.report"
CUSTOMSUBJECT="[salar] $(hostname)"
MAILTO="root@$(hostname -f)"
MAILFROM="root@$(hostname -f)"
MAILFULLFROM="root@$(hostname -f)"
CONFIGURATION="/etc/spamassassin/salar.conf"
PRINTONLY=0
USELASTREPORT=0

## Get options
while getopts  "hvlprc:" OPTION
do
    case $OPTION in
        h)
            print_usage
            exit 0
            ;;
        v)
            print_version
            exit 0
            ;;
        l)
            print_license
            exit 0
            ;;
        p)
            ## Do not mail the result, print it to stdout
            PRINTONLY=1
            ;;
        r)
            ## Don't run sa-learn but use the last report instead
            USELASTREPORT=1
            ;;
        c)
            ## Use an other configuration file
            CONFIGURATION=$OPTARG
            ;;
        ?)
            print_usage
            exit 0
            ;;
    esac
done

## Test and read the configuration file
if [ ! -e "$CONFIGURATION" ]
then
    echo "$CONFIGURATION does not exist."
    need_conf
    exit 1
elif [ -r "$CONFIGURATION" ]
then
    . "$CONFIGURATION"
    declare -A dirs
    dirs['SPAMDIR']="$SPAMDIR"
    dirs['HAMDIR']="$HAMDIR"
    for i in "SPAMDIR" "HAMDIR"
    do
        if [ -z "${dirs[${i}]}" ]
        then
            echo "$i is not set in $CONFIGURATION."
            need_conf
            exit 1
        fi
        ## Here I got a strange behavior of -e, so I encapsulate a "test -e"
        if [ ! $(test -e "${dirs[${i}]}"; echo $?) ]
        then
            echo "${dirs[${i}]} does not exists."
            echo "Please provide a correct $i."
            exit 1
        fi
    done
    if [ ! -z "$SALEARNOPTS" ]
    then
        SALEARNOPTS=" $SALEARNOPTS"
    fi
else
    echo "$CONFIGURATION is not readable."
    echo "Please, check permissions."
    exit 1
fi

if [ "$USELASTREPORT" -eq 0 ]
then
    ## Learn spam
    echo -ne "Spam learning :\n    "           > "$REPORTFILE"
    "$SALEARN""$SALEARNOPTS" --spam "$SPAMDIR" >> "$REPORTFILE"
   
    ## Learn ham
    echo -ne "Ham learning :\n    "            >> "$REPORTFILE"
    "$SALEARN""$SALEARNOPTS" --ham "$HAMDIR"   >> "$REPORTFILE"
   
    ## Give some stats
    echo "Statistics :" >> "$REPORTFILE"
    "$SALEARN"  --dump magic 2>/dev/null | while read line
    do
        case "$line" in
            *nspam*)
                echo -n "    Learned spam   : " >> "$REPORTFILE"
                echo $line | awk '{print $3}'   >> "$REPORTFILE"
                ;;
            *nham*)
                echo -n "    Learned ham    : " >> "$REPORTFILE"
                echo $line | awk '{print $3}'   >> "$REPORTFILE"
                ;;
            *ntokens*)
                echo -n "    Learned tokens : " >> "$REPORTFILE"
                echo $line | awk '{print $3}'   >> "$REPORTFILE"
                ;;
         esac
    done
fi

if [ "$PRINTONLY" -eq 1 ]
then
    cat "$REPORTFILE"
elif [ "$PRINTONLY" -eq 0 ]
then
    cat "$REPORTFILE" | mail -s "$CUSTOMSUBJECT" "$MAILTO" -- -r "$MAILFROM" -F "$MAILFULLFROM"
fi

exit $?
